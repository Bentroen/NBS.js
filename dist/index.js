(()=>{"use strict";var __webpack_modules__={"./index.ts":
/*!******************!*\
  !*** ./index.ts ***!
  \******************/(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ NBSjs)\n/* harmony export */ });\n/* harmony import */ var _nbs_Song__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./nbs/Song */ "./nbs/Song.ts");\n/* harmony import */ var _nbs_Layer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./nbs/Layer */ "./nbs/Layer.ts");\n/* harmony import */ var _nbs_Note__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./nbs/Note */ "./nbs/Note.ts");\n/* harmony import */ var _nbs_Instrument__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./nbs/Instrument */ "./nbs/Instrument.ts");\n/* harmony import */ var _util_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./util/util */ "./util/util.ts");\n\n\n\n\n\nfunction NBSjs() { }\nNBSjs.Song = _nbs_Song__WEBPACK_IMPORTED_MODULE_0__["default"];\nNBSjs.Layer = _nbs_Layer__WEBPACK_IMPORTED_MODULE_1__["default"];\nNBSjs.Note = _nbs_Note__WEBPACK_IMPORTED_MODULE_2__["default"];\nNBSjs.Instrument = _nbs_Instrument__WEBPACK_IMPORTED_MODULE_3__["default"];\nNBSjs.getLayerClass = _util_util__WEBPACK_IMPORTED_MODULE_4__.getLayerClass;\nNBSjs.getNoteClass = _util_util__WEBPACK_IMPORTED_MODULE_4__.getNoteClass;\nNBSjs.getInstrumentClass = _util_util__WEBPACK_IMPORTED_MODULE_4__.getInstrumentClass;\nNBSjs.setLayerClass = _util_util__WEBPACK_IMPORTED_MODULE_4__.setLayerClass;\nNBSjs.setNoteClass = _util_util__WEBPACK_IMPORTED_MODULE_4__.setNoteClass;\nNBSjs.setInstrumentClass = _util_util__WEBPACK_IMPORTED_MODULE_4__.setInstrumentClass;\n\n\n//# sourceURL=webpack://NBSjs/./index.ts?')},"./nbs/Instrument.ts":
/*!***************************!*\
  !*** ./nbs/Instrument.ts ***!
  \***************************/(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ Instrument)\n/* harmony export */ });\nvar _a;\nclass Instrument {\n    /**\n     * Construct an instrument.\n     * @param name Name of the instrument\n     * @param id ID of the instrument in the song\'s instrument array\n     * @param audioSrc Audio file for the instrument\n     * @param pitch Pitch offset of the instrument\n     * @param key Key of the instrument\n     */\n    constructor(name, id, audioSrc, pitch = 0, key = 0) {\n        this.name = name;\n        this.id = id;\n        this.audioSrc = audioSrc;\n        this.pitch = pitch === "default" ? 0 : pitch;\n        this.key = key === "default" ? 45 : key;\n    }\n}\n_a = Instrument;\n/**\n * The built-in instruments.\n */\nInstrument.builtIn = [\n    new _a("Harp", 0, "harp.ogg", "default", "default"),\n    new _a("Double Bass", 1, "dbass.ogg"),\n    new _a("Bass Drum", 2, "bdrum.ogg"),\n    new _a("Snare Drum", 3, "sdrum.ogg"),\n    new _a("Click", 4, "click.ogg"),\n    new _a("Guitar", 5, "guitar.ogg"),\n    new _a("Flute", 6, "flute.ogg"),\n    new _a("Bell", 7, "bell.ogg"),\n    new _a("Chime", 8, "chime.ogg"),\n    new _a("Xylophone", 9, "xylophone.ogg"),\n    new _a("Iron Xylophone", 10, "iron_xylophone.ogg"),\n    new _a("Cow Bell", 11, "cow_bell.ogg"),\n    new _a("Didgeridoo", 12, "didgeridoo.ogg"),\n    new _a("Bit", 13, "bit.ogg"),\n    new _a("Banjo", 14, "banjo.ogg"),\n    new _a("Pling", 15, "pling.ogg")\n];\n\n\n//# sourceURL=webpack://NBSjs/./nbs/Instrument.ts?')},"./nbs/Layer.ts":
/*!**********************!*\
  !*** ./nbs/Layer.ts ***!
  \**********************/(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ Layer)\n/* harmony export */ });\n/* harmony import */ var _util_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/util */ "./util/util.ts");\n\nclass Layer {\n    /**\n     * Construct a layer.\n     * @param song Song the layer is attached to\n     * @param id ID of the layer\n     */\n    constructor(song, id) {\n        /**\n         * Name of the layer.\n         */\n        this.name = "";\n        /**\n         * Velocity of the layer.\n         */\n        this.velocity = 100;\n        /**\n         * Panning of the layer.\n         */\n        this.panning = 100;\n        /**\n         * Whether the layer is locked.\n         */\n        this.locked = false;\n        /**\n         * Notes within the layer.\n         */\n        this.notes = [];\n        this.song = song;\n        this.id = id;\n    }\n    /**\n     * Set a note at a tick.\n     * @param tick Tick to set the note\n     * @param key The note\'s key\n     * @param panning The note\'s panning\n     * @param velocity The note\'s velocity\n     * @param pitch The note\'s pitch\n     * @param instrument The note\'s instrument\n     */\n    setNote(tick, key, panning, velocity, pitch, instrument) {\n        // Expand the song if required\n        if (tick + 1 > this.song.size) {\n            this.song.size = tick + 1;\n        }\n        // Construct the note\n        const note = new ((0,_util_util__WEBPACK_IMPORTED_MODULE_0__.getNoteClass)())(key, panning, velocity, pitch, instrument);\n        this.notes[tick] = note;\n        return note;\n    }\n    /**\n     * Delete the layer from the song.\n     */\n    delete() {\n        this.song.deleteLayer(this);\n    }\n    // todo: shrink song if last tick\n    /**\n     * Delete a note at a specified tick.\n     * @param tick Tick to remove note from\n     */\n    deleteNote(tick) {\n        delete this.notes[tick];\n    }\n}\n\n\n//# sourceURL=webpack://NBSjs/./nbs/Layer.ts?')},"./nbs/Note.ts":
/*!*********************!*\
  !*** ./nbs/Note.ts ***!
  \*********************/(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ Note)\n/* harmony export */ });\nclass Note {\n    /**\n     * Construct a note.\n     * @param key Key of the note\n     * @param panning Panning of the note\n     * @param velocity Velocity of the note\n     * @param pitch Pitch of the note\n     * @param instrument Instrument of the note\n     */\n    constructor(key, panning, velocity, pitch, instrument) {\n        this.key = key;\n        this.panning = panning;\n        this.velocity = velocity;\n        this.pitch = pitch;\n        this.instrument = instrument;\n    }\n}\n\n\n//# sourceURL=webpack://NBSjs/./nbs/Note.ts?')},"./nbs/Song.ts":
/*!*********************!*\
  !*** ./nbs/Song.ts ***!
  \*********************/(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ Song)\n/* harmony export */ });\n/* harmony import */ var _util_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/util */ "./util/util.ts");\n\nclass Song {\n    constructor() {\n        /**\n         * Size of the song.\n         */\n        this.size = 0;\n        /**\n         * Name of the song.\n         */\n        this.name = "";\n        /**\n         * Author of the song.\n         */\n        this.author = "";\n        /**\n         * Original author of the song.\n         */\n        this.originalAuthor = "";\n        /**\n         * Description of the song.\n         */\n        this.description = "";\n        /**\n         * Name of the imported MIDI file.\n         */\n        this.midiName = "";\n        /**\n         * Tempo of the song.\n         */\n        this.tempo = 5;\n        /**\n         * Time signature of the song.\n         */\n        this.timeSignature = 4;\n        /**\n         * Whether looping is enabled.\n         */\n        this.loopEnabled = false;\n        /**\n         * Maximum times to loop the song.\n         */\n        this.maxLoopCount = 0;\n        /**\n         * Which tick to loop the song on.\n         */\n        this.loopStartTick = 0;\n        /**\n         * Whether auto-save is enabled.\n         */\n        this.autoSaveEnabled = false;\n        /**\n         * Duration of minutes between auto-saves.\n         */\n        this.autoSaveDuration = 5;\n        /**\n         * Minutes spent with the song open.\n         */\n        this.minutesSpent = 0;\n        /**\n         * Times the song has received left-clicks.\n         */\n        this.leftClicks = 0;\n        /**\n         * Times the song has received right-clicks.\n         */\n        this.rightClicks = 0;\n        /**\n         * Total amount of blocks added.\n         */\n        this.blocksAdded = 0;\n        /**\n         * Total amount of blocks removed\n         */\n        this.blocksRemoved = 0;\n        /**\n         * Version of NBS the song has been saved to.\n         */\n        this.nbsVersion = 0;\n        /**\n         * Layers within the song.\n         */\n        this.layers = [];\n    }\n    /**\n     * Instruments of the song.\n     */\n    get instruments() {\n        return (0,_util_util__WEBPACK_IMPORTED_MODULE_0__.getInstrumentClass)().builtIn;\n    }\n    /**\n     * Amount of milliseconds each tick takes.\n     */\n    get timePerTick() {\n        return 20 / this.tempo * 50;\n    }\n    /**\n     * Length of the song in milliseconds.\n     */\n    get endTime() {\n        return this.size * this.timePerTick;\n    }\n    /**\n     * Create and add a new layer.\n     */\n    addLayer() {\n        const layer = new ((0,_util_util__WEBPACK_IMPORTED_MODULE_0__.getLayerClass)())(this, this.layers.length + 1);\n        this.layers.push(layer);\n        return layer;\n    }\n    /**\n     * Delete a layer from the song.\n     * @param layer Layer to delete.\n     */\n    deleteLayer(layer) {\n        this.layers.splice(this.layers.indexOf(layer), 1);\n    }\n    /**\n     * Parse a song from an array buffer.\n     * @param arrayBuffer ArrayBuffer to parse from\n     */\n    static fromArrayBuffer(arrayBuffer) {\n        const song = new this();\n        const reader = new _util_util__WEBPACK_IMPORTED_MODULE_0__.BufferReader(arrayBuffer);\n        let size = reader.readShort(); // Read song size\n        // Check if NBS file is ONBS versioned\n        if (size === 0) {\n            song.nbsVersion = reader.readByte(); // Read NBS version\n            reader.readByte(); // Read first custom instrument\n            if (song.nbsVersion >= 3) {\n                size = reader.readShort(); // Read real song size\n            }\n        }\n        const totalLayers = reader.readShort(); // Read total amount of layers\n        song.name = reader.readString(); // Read song name\n        song.author = reader.readString(); // Read song author\n        song.originalAuthor = reader.readString(); // Read song original author\n        song.description = reader.readString(); // Read song description\n        song.tempo = reader.readShort() / 100; // Read song tempo\n        song.autoSaveEnabled = Boolean(reader.readByte()); // Read song auto-save status\n        song.autoSaveDuration = reader.readByte(); // Read song auto-save interval\n        song.timeSignature = reader.readByte(); // Read song time signature\n        song.minutesSpent = reader.readInt(); // Read minutes spent in song\n        song.leftClicks = reader.readInt(); // Read left-clicks on song\n        song.rightClicks = reader.readInt(); // Read right-clicks on song\n        song.blocksAdded = reader.readInt(); // Read total blocks added to song\n        song.blocksRemoved = reader.readInt(); // Read total blocks removed from song\n        song.midiName = reader.readString(); // Read imported MIDI file name\n        if (song.nbsVersion >= 4) {\n            song.loopEnabled = Boolean(reader.readByte()); // Read loop status\n            song.maxLoopCount = reader.readByte(); // Read maximum loop count\n            song.loopStartTick = reader.readShort(); // Read loop start tick\n        }\n        // Read layer and note data\n        const rawNotes = [];\n        let tick = -1;\n        while (true) {\n            // Jump to the next tick\n            const jumpTicks = reader.readShort(); // Read amount of ticks to jump\n            if (jumpTicks === 0) {\n                break;\n            }\n            tick += jumpTicks;\n            let layer = -1;\n            while (true) {\n                // Jump to the next layer\n                const jumpLayers = reader.readShort(); // Read amount of layers to jump\n                if (jumpLayers === 0) {\n                    break;\n                }\n                layer += jumpLayers;\n                // Get note at tick\n                const instrument = reader.readByte(); // Read instrument of note\n                const key = reader.readByte(); // Read key of note\n                let velocity = 100;\n                let panning = 100;\n                let pitch = 0;\n                if (song.nbsVersion >= 4) {\n                    velocity = reader.readByte(); // Read velocity of note\n                    panning = reader.readUnsingedByte() - 200; // Read panning of note\n                    pitch = reader.readShort(); // Read pitch of note\n                }\n                // Push the note data to raw notes array\n                rawNotes.push({\n                    "instrument": instrument,\n                    "key": key,\n                    "velocity": velocity,\n                    "panning": panning,\n                    "pitch": pitch,\n                    "layer": layer,\n                    "tick": tick\n                });\n            }\n        }\n        // Guess song size for ONBS versions without size byte\n        if (song.nbsVersion > 0 && song.nbsVersion < 3) {\n            size = tick;\n        }\n        song.size = size;\n        // Add layers to song\n        if (arrayBuffer.byteLength > reader.currentByte) {\n            for (let i = 0; i < totalLayers; i++) {\n                const layer = song.addLayer();\n                layer.name = reader.readString(); // Read layer name\n                if (song.nbsVersion >= 4) {\n                    layer.locked = Boolean(reader.readByte()); // Read layer lock status\n                }\n                layer.velocity = reader.readByte(); // Read layer velocity\n                let panning = 100;\n                if (song.nbsVersion >= 2) {\n                    panning = reader.readUnsingedByte() - 200; // Read layer panning\n                }\n                layer.panning = panning;\n            }\n        }\n        // Parse custom instruments\n        const customInstruments = reader.readByte(); // Read number of custom instruments\n        for (let i = 0; i < customInstruments; i++) {\n            song.instruments.push(new ((0,_util_util__WEBPACK_IMPORTED_MODULE_0__.getInstrumentClass)())(reader.readString(), // Read instrument name\n            i + song.instruments.length, reader.readString(), // Read instrument file\n            reader.readByte(), // Read instrument pitch\n            reader.readByte())); // Read instrument key\n        }\n        // Parse notes\n        for (const rawNote of rawNotes) {\n            // Create layer if non-existent\n            if (rawNote.layer >= song.layers.length) {\n                song.addLayer();\n            }\n            // Add note to layer\n            const layer = song.layers[rawNote.layer];\n            layer.setNote(rawNote.tick, rawNote.key, rawNote.panning, rawNote.velocity, rawNote.pitch, song.instruments[rawNote.instrument]);\n        }\n        return song;\n    }\n}\n\n\n//# sourceURL=webpack://NBSjs/./nbs/Song.ts?')},"./util/util.ts":
/*!**********************!*\
  !*** ./util/util.ts ***!
  \**********************/(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "BufferReader": () => (/* binding */ BufferReader),\n/* harmony export */   "getLayerClass": () => (/* binding */ getLayerClass),\n/* harmony export */   "getNoteClass": () => (/* binding */ getNoteClass),\n/* harmony export */   "getInstrumentClass": () => (/* binding */ getInstrumentClass),\n/* harmony export */   "setLayerClass": () => (/* binding */ setLayerClass),\n/* harmony export */   "setNoteClass": () => (/* binding */ setNoteClass),\n/* harmony export */   "setInstrumentClass": () => (/* binding */ setInstrumentClass)\n/* harmony export */ });\n/* harmony import */ var _nbs_Instrument__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../nbs/Instrument */ "./nbs/Instrument.ts");\n/* harmony import */ var _nbs_Note__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../nbs/Note */ "./nbs/Note.ts");\n/* harmony import */ var _nbs_Layer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../nbs/Layer */ "./nbs/Layer.ts");\n\n\n\nclass BufferReader {\n    constructor(buffer) {\n        this.currentByte = 0;\n        this.buffer = buffer;\n        this.viewer = new DataView(buffer);\n    }\n    readByte() {\n        const result = this.viewer.getInt8(this.currentByte);\n        this.currentByte += 1;\n        return result;\n    }\n    readUnsingedByte() {\n        const result = this.viewer.getUint8(this.currentByte);\n        this.currentByte += 1;\n        return result;\n    }\n    readShort() {\n        const result = this.viewer.getInt16(this.currentByte, true);\n        this.currentByte += 2;\n        return result;\n    }\n    readInt() {\n        const result = this.viewer.getInt32(this.currentByte, true);\n        this.currentByte += 4;\n        return result;\n    }\n    readString() {\n        const length = this.readInt();\n        let result = "";\n        for (let i = 0; i < length; i++) {\n            const byte = this.readUnsingedByte();\n            result += String.fromCodePoint(byte);\n        }\n        return result;\n    }\n}\nlet LayerClass = _nbs_Layer__WEBPACK_IMPORTED_MODULE_2__["default"];\nfunction getLayerClass() {\n    return LayerClass;\n}\nfunction setLayerClass(clazz) {\n    LayerClass = clazz;\n}\nlet NoteClass = _nbs_Note__WEBPACK_IMPORTED_MODULE_1__["default"];\nfunction getNoteClass() {\n    return NoteClass;\n}\nfunction setNoteClass(clazz) {\n    NoteClass = clazz;\n}\nlet InstrumentClass = _nbs_Instrument__WEBPACK_IMPORTED_MODULE_0__["default"];\nfunction getInstrumentClass() {\n    return InstrumentClass;\n}\nfunction setInstrumentClass(clazz) {\n    InstrumentClass = clazz;\n}\n\n\n\n//# sourceURL=webpack://NBSjs/./util/util.ts?')}},__webpack_module_cache__={};function __webpack_require__(e){var n=__webpack_module_cache__[e];if(void 0!==n)return n.exports;n=__webpack_module_cache__[e]={exports:{}};return __webpack_modules__[e](n,n.exports,__webpack_require__),n.exports}__webpack_require__.d=(e,n)=>{for(var t in n)__webpack_require__.o(n,t)&&!__webpack_require__.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:n[t]})},__webpack_require__.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),__webpack_require__.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var __webpack_exports__=__webpack_require__("./index.ts");window.NBSjs=__webpack_exports__.default})();